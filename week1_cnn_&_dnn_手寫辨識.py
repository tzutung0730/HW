# -*- coding: utf-8 -*-
"""WEEK1 - CNN & DNN 手寫辨識

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B3LaijGGBd0qTsQPekTYdukrLfzXY1cQ
"""

import keras
import numpy as np
import matplotlib.pyplot as plt
from keras.datasets import mnist
from keras.models import Sequential,load_model,model_from_json
from keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Activation
from keras.utils import to_categorical


(x_train,y_train),(x_test,y_test) = mnist.load_data() #讀取mnist數據庫(有6萬筆訓練資料、1萬筆測試資料)
plt.imshow(x_train[94],cmap='Greys') #測試地94筆資料

"""1. DNN手寫辨識"""

#資料前處理
x_train = x_train.reshape(60000,784) #將二維資料轉換成一維資料
x_test = x_test.reshape(10000,784)
x_train = x_train/255 #除以255將值壓所在0-1之間(正規化)
x_test = x_test/255
y_train = to_categorical(y_train) #使用one-hot-encoding進行轉換
y_test = to_categorical(y_test)

print("DNN手寫辨識")

#建立模型
model = Sequential()
#輸入層與隱藏層
model.add(Dense(units=256,input_dim=784,activation='relu'))
#隱藏層
model.add(Dense(units=128,activation='relu'))
#輸出層
model.add(Dense(units=10,activation='softmax'))
#定義訓練方式
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
#開始訓練
history = model.fit(x_train,y_train,batch_size=128,epochs=10,verbose=1,validation_data=(x_test,y_test))

def save_train_history(train_acc,test_acc,filename):
  plt.clf()
  plt.figure(figsize=(4,3))
  plt.plot(history.history[train_acc])
  plt.plot(history.history[test_acc])
  plt.title('Train History')
  plt.ylabel('Accuracy')
  plt.xlabel('Epoch')
  plt.legend(['train','test'], loc='upper right')
save_train_history('accuracy','val_accuracy','acc.png')

def save_train_history2(train_loss,test_loss,filename):
  plt.clf()
  plt.figure(figsize=(4,3))
  plt.plot(history.history[train_loss])
  plt.plot(history.history[test_loss])
  plt.title('Train History')
  plt.ylabel('loss')
  plt.xlabel('Epoch')
  plt.legend(['train','test'], loc='upper right')
save_train_history2('loss','val_loss','loss.png')

"""2. CNN手寫辨識"""

#資料前處理
x_train = x_train.reshape(60000, 28, 28, 1)#CNN的輸入為(長,寬,色彩)
x_test = x_test.reshape(10000, 28, 28, 1)
x_train = x_train/255 #除以255將值壓所在0-1之間(正規化)
x_test = x_test/255
y_train = to_categorical(y_train) #使用one-hot-encoding進行轉換
y_test = to_categorical(y_test)

print("CNN手寫辨識")

#建構網路
model = Sequential()
#CNN輸入為28*28*1
model.add(Conv2D(32,kernel_size=3,input_shape=(28,28,1),padding="same",activation='relu'))
#池化層
model.add(MaxPooling2D(pool_size=2))
#攤平
model.add(Flatten())
#全連接層
model.add(Dense(16,activation='relu'))
#輸出層
model.add(Dense(10,activation='softmax'))
#定義訓練方式
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
#開始訓練
history = model.fit(x_train,y_train,batch_size=128,epochs=10,verbose=1,validation_data=(x_test,y_test))

def save_train_history(train_acc,test_acc,filename):
  plt.clf()
  plt.figure(figsize=(4,3))
  plt.plot(history.history[train_acc])
  plt.plot(history.history[test_acc])
  plt.title('Train History')
  plt.ylabel('Accuracy')
  plt.xlabel('Epoch')
  plt.legend(['train','test'], loc='upper right')
save_train_history('accuracy','val_accuracy','acc.png')